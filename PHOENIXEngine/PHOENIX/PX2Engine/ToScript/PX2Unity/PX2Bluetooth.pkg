// PX2Bluetooth.pkg

	class Bluetooth
	{
	public:
		enum Type
		{
			T_2,
			T_4,
			T_MAX_TYPE
		};
		void SetType(Type t);
		Type GetType() const;
		
		void SetDataProtocolHex(bool xCube);
		bool IsDataProtocolHex() const;
	
		bool IsAvailable() const;
		bool IsConnected() const;
		
		void Update(float elapsedSeconds);

		std::vector<std::string> GetPairedDevices();
		
		void ClearSendReceives();

		int GetNumPairedDevices() const;
		std::string GetPairedDevice(int i) const;
		
		void SetWriteServiceID(const std::string &serviceID);
		const std::string &GetWriteServiceID() const;
		void SetWriteCharaID(const std::string &charaID);
		const std::string &GetWriteCharaID() const;

		void SetReadServiceID(const std::string &serviceID);
		const std::string &GetReadServiceID() const;
		void SetReadCharaID(const std::string &charaID);
		const std::string &GetReadCharaID() const;
		
		void DisConnect();
		void Connect(const std::string &addr);
		void ReConnect();
		void Send(const std::string &str, bool withRead=false);
		void SendHex(const std::string &hexStr, bool withRead=false);
		
		void DoDiscovery();
		void CancelDiscovery();
		
		void ClearScirptHandlers();
		bool IsHasScriptHandler(const std::string &scriptHandler);
		void AddScriptHandler(const std::string &scriptHandler);
		void RemoveScriptHandler(const std::string &scriptHandler);
		
		void ClearScriptHandlersHex();
		bool IsHasScriptHandlerHex(const std::string &scriptHandler);
		void AddScriptHandlerHex(const std::string &scriptHandler);
		void RemoveScriptHandlerHex(const std::string &scriptHandler);
		
		int Rssi100(int rssi);
		
		void BeginHex(const std::string &headVal);
		void AddHex(int val);
		void AddHex(int bit0, int bit1, int bit2, int bit3);
		void AddHex(int bit0, int bit1, int bit2, int bit3, int bit4, int bit5, int bit6, int bit7);
		std::string EndHexStr(bool isDoAddCal);
	};